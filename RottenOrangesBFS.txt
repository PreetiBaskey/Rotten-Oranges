#include<bits/stdc++.h>
using namespace std;

// Examples 1:
// 0 1 2
// 0 1 2
// 2 1 1
// Example 2:
// 1 2 1
// 1 1 0
// 0 0 1
// Example 3:
// 0 1 2
// 0 1 1
// 2 1 1

int findUnitTime(vector<vector<int>> &grid, vector<vector<int>> &visited, queue<pair<pair<int, int>, int>> &q) {
    int n = grid.size();
    int m = grid[0].size();
    int delrow[] = {-1, 0, 1, 0};
    int delcol[] = {0, 1, 0, -1};
    int maxTime = 0;
    int found = 0;
    
    while(!q.empty()) {
        int front_row = q.front().first.first;
        int front_col = q.front().first.second;
        int unit_time = q.front().second;
        maxTime = unit_time;
        q.pop();
        for(int i = 0; i < 4; i++) {
            int newRow = front_row + delrow[i];
            int newCol = front_col + delcol[i];
            if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && grid[newRow][newCol] == 1 && !visited[newRow][newCol]) {
                q.push({{newRow, newCol}, unit_time + 1});
                visited[newRow][newCol] = 1;
                grid[newRow][newCol] = 2;
            }
        }
    }
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(grid[i][j] == 1) {
                found = 1;
            }
        }
    }
    
    if(found) return -1;
    return maxTime;
}

int main() {
    
    int n, m;
    
    cout<<"Enter number of rows :- ";
    cin>>n;
    cout<<"Enter number of columns :- ";
    cin>>m;
    
    vector<vector<int>> grid(n, vector<int>(m));
    queue<pair<pair<int, int>, int>> q;
    vector<vector<int>> visited(n, vector<int>(m, 0));
    int unitTime = 0;
    
    for(int i = 0; i < n; i++) {
        cout<<"Enter "<<i + 1<<" row :- ";
        for(int j = 0; j < m; j++) {
            cin>>grid[i][j];
        }
        cout<<endl;
    }
    
    cout<<"2 D grid before any changes is : "<<endl;
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(grid[i][j] == 2) {
                visited[i][j] = 1;
                q.push({{i, j}, unitTime});
            }
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }
    
    int final_time = findUnitTime(grid, visited, q);
    
    
    cout<<"2 D grid after changes are : "<<endl;
    
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            cout<<grid[i][j]<<" ";
        }
        cout<<endl;
    }
    
    if(final_time != -1) {
        cout<<"Unit time is :- "<<final_time<<endl;
    }
    else {
        cout<<"All fresh oranges are not possible to rot ."<<endl;
    }
    return 0;
}